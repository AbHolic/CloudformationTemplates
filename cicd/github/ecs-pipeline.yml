AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template contains a
  deployment process for  
  Lambda functions and API gateways
  with a Github SCM.

# This template creates:
#   Code Build Project
#   Codepipeline
#   IAM Role for Pipeline execution

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Details
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: Infrastructure Pipeline Configuration
        Parameters:
          - ServiceName
          - PipelineDeployRole
          - GitRepo
          - GitOwner
          - BranchName
          - GitOAuthToken
          - NotificationEmail
          - CodeBuildComputeType
          - BuildFramework

    ParameterLabels:
      ProjectName:
        default: "Project Name"
      ServiceName:
        default: "Service Name"
      PipelineDeployRole:
        default: "Pipeline's Deploy Role"
      GitRepo:
        default: "Pipeline's Git Repository"
      GitOwner:
        default: "Git Owner"
      NotificationEmail:
        default: "Email for Deployment Notifications"
      BranchName:
        default: "Git Branch to watch"
      GitOAuthToken:
        default: "Git OAuth Token"
      BuildFramework:
        default: "Programming language or framework"
      CodeBuildComputeType:
        default: "Codebuild Environment Compute Type"

Parameters:
  # So that the pipeline can be used in other projects
  ProjectName:
    Description: Project Name to identify stack and infrastructure
    Type: String

  ServiceName:
    Description: Service Name to identify stack and infrastructure
    Type: String
    
  Environment:
    Description: Environment to deploy the Stack
    Type: String
    AllowedValues:
      - Stage
      - Prod
      - Test
      - Dev

  PipelineDeployRole:
    Type: String
    Description: ARN of IAM Role to use for deploying the service

  GitRepo:
    Type: String
    Description: Git Repository where CloudFormation templates are stored

  GitOwner:
    Type: String
    Description: Owner of Git Repository

  BranchName:
    Description: Enter the GitHub branch to monitored
    Type: String
    Default: master

  GitOAuthToken:
    Type: String
    NoEcho: true
    Default: ""

  NotificationEmail:
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: "Must be a valid email address"
    Description: Email for deployment updates

  CodeBuildComputeType:
    Description: "Codebuild Compute Type"
    Type: String
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_SMALL

  BuildFramework:
    Type: String
    AllowedValues:
      - golang
      - java
      - nodejs8.11.0
      - nodejs10.14.1
      - python
      - ruby
      - docker
    Default: "docker"
  
  Changelog:
    Description: A description of all the changes made in this stack. This is required for the template to update.
    Type: String
    Default: Initial

Mappings:

# As of 04/12/20, all of the current builds are supported by the standard codebuild image.
# This mapping may be used in the future should the someone decide to add support for more languages.
  CodeBuildImageMap:
    golang:
      "DockerImage": "al2/standard/3.0"
    java:
      "DockerImage": "al2/standard/3.0"
    nodejs8.11.0:
      "DockerImage": "al2/standard/3.0"
    nodejs10.14.1:
      "DockerImage": "al2/standard/3.0"
    python:
      "DockerImage": "al2/standard/3.0"
    ruby:
      "DockerImage": "al2/standard/3.0"
    docker:
      "DockerImage": "al2/standard/3.0"

Resources:
  # Pipeline notification SNS topic

  DeploymentUpdatesTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: "email"
      TopicName: "DeploymentUpdates"

  # CodeBuild project and resources (S3 Bucket for build artifacts, Role, Project)

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: !Sub /${ProjectName}/${Environment}/${ServiceName}/codebuild/
      Policies:
        - PolicyName: !Sub CodeBuildAccess${ProjectName}${ServiceName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "ssm:GetParametersByPath"
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "serverlessrepo:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "ecr:GetAuthorizationToken"
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ServiceName}

  CodeBuild: 
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-${ServiceName}-CodeBuild"
      Description: Build project for the production service
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref CodeBuildComputeType
        Image:
          !FindInMap [CodeBuildImageMap, !Ref BuildFramework, "DockerImage"]
        EnvironmentVariables:
          - Name: SERVICE
            Value: !Ref ServiceName
          - Name: ENV
            Value: !Ref Environment
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE

  # CodePipeline definition and required roles
  CFNPipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: CloudFormation Pipeline Execution Policy. This is used by CodePipeline to run Cloudformation templates for the Lambda Deployment, access codebuild applications, and publish SNS notifications.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudformation:CreateStack"
              - "cloudformation:DescribeStacks"
              - "cloudformation:DeleteStack"
              - "cloudformation:UpdateStack"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:DeleteChangeSet"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:SetStackPolicy"
              - "cloudformation:SetStackPolicy"
              - "cloudformation:ValidateTemplate"
              - "codebuild:StartBuild"
              - "codebuild:BatchGetBuilds"
              - "ecr:DescribeImages"
              - "sns:Publish"
            Resource: "*"

  PipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Path: !Sub /${ProjectName}/${Environment}/${ServiceName}/pipelines/
      ManagedPolicyArns:
        - !Ref CFNPipelinePolicy
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "iam:PassRole"
                Effect: Allow
                Resource: "*"
                
  CodedeployApp:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: !Sub "${ProjectName}${ServiceName}-${Environment}-ChangeSet"
      ComputePlatform: ECS
      
  CodedeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodedeployApp
      DeploymentConfigName: CodeDeployDefault.ECSCanary10percent5Minutes
      DeploymentStyle: 
        DeploymentStyle
      Ec2TagFilters: 
        - EC2TagFilter
      Ec2TagSet: 
        EC2TagSet
      LoadBalancerInfo: 
        LoadBalancerInfo
      OnPremisesInstanceTagFilters: 
        - TagFilter
      OnPremisesTagSet: 
        OnPremisesTagSet
      ServiceRoleArn: String
      TriggerConfigurations: 
        - TriggerConfig
    
    
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref BuildArtifactsBucket
        Type: S3
      Name: !Sub ${ProjectName}${ServiceName}_pipeline
      RoleArn: !GetAtt PipelineExecutionRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: !Sub ${ServiceName}-${Environment}
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GitOwner
                Repo: !Sub "${GitRepo}"
                Branch: !Ref BranchName
                OAuthToken: !Ref GitOAuthToken
              OutputArtifacts:
                - Name: !Sub ${ServiceName}SourceZip
              RunOrder: 1
        - Name: Image-Build
          Actions:
            - Name: !Sub ${ServiceName}-${Environment}
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ProductionCodeBuild
              InputArtifacts:
                - Name: !Sub ${ServiceName}ProdSourceZip
              OutputArtifacts:
                - Name: !Sub ${ServiceName}ProdBuiltZip
            - Name: !Sub ${ServiceName}-${Environment}-ChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !Ref PipelineDeployRole
                StackName: !Sub "${ProjectName}-${ServiceName}-${Environment}-Stack"
                ChangeSetName: !Sub "${ProjectName}${ServiceName}-${Environment}-ChangeSet"
                TemplatePath: !Sub ${ServiceName}SourceZip::${ServiceName}.yml
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub '{ "Stage": "${Environment}", "ProjectName" : "${ProjectName}" }'
              InputArtifacts:
                - Name: !Sub ${ServiceName}SourceZip
              RunOrder: 1
            - Name: !Sub ${ServiceName}-${Environment}-DevelopDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                RoleArn: !Ref PipelineDeployRole
                StackName: !Sub "${ServiceName}-${Environment}-Stack"
                ChangeSetName: !Sub "${ProjectName}${ServiceName}-${Environment}-ChangeSet"
              OutputArtifacts:
                - Name: !Sub "${ProjectName}${ServiceName}DevelopStageChangeSet"
              RunOrder: 2
        - Name: Deploy-Tasks-and-Services
          Actions:
            - Name: !Sub ${ServiceName}TestChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !Ref PipelineDeployRole
                StackName: !Sub "${ProjectName}${ServiceName}Test-Stack-Stage"
                ChangeSetName: !Sub "${ProjectName}${ServiceName}Test-ChangeSet-Stage"
                TemplatePath: !Sub ${ServiceName}TestBuiltZip::app-output_sam.yaml
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub '{ "Stage": "Test", "ProjectName" : "${ProjectName}" }'
              InputArtifacts:
                - Name: !Sub ${ServiceName}TestBuiltZip
              RunOrder: 1

Outputs:
  Changelog:
    Description: A description of all the changes made in this stack. This is required for the template to update.
    Value: !Ref Changelog
